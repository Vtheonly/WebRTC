{
  "settings": {
    "mySetting": "default",
    "llmProvider": "gemini",
    "apiKeys": {
      "openai": "",
      "anthropic": "",
      "deepseek": "",
      "gemini": "AIzaSyBuF-1AX9K2qay9HNY1ArQm4gYdZ2YVP4I",
      "mistral": ""
    },
    "models": {
      "openai": "gpt-4",
      "anthropic": "claude-3-opus-20240229",
      "deepseek": "deepseek-chat",
      "gemini": "gemini-1.5-flash",
      "mistral": "mistral-medium"
    }
  },
  "persistedIndex": [
    {
      "filePath": "Markdown Slides/5. final project.md",
      "content": "---\nmarp: true\n---\n\n# Recap: What We've Learned\n\nWe've covered the fundamentals of web development:\n\n-   **HTML:** Structure and content of web pages (tags, elements, attributes).\n-   **CSS:** Styling and presentation (selectors, box model, properties, values).\n-   **JavaScript:** Interactivity and dynamic behavior (variables, functions, DOM manipulation, events).\n\n---\n\n## Connecting the Pieces\n\n-   **HTML** provides the building blocks.\n-   **CSS** makes it look good.\n-   **JavaScript** makes it do things.\n\nThese three technologies work together to create modern web pages and applications.\n\n---",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Markdown Slides/4. js.md",
      "content": "---\nmarp: true\n---\n\n# Introduction to JavaScript\n\nA Concise Guide to Essential JavaScript Concepts\n\n---\n\n## What is JavaScript?\n\n-   A scripting language that adds interactivity to web pages.\n-   Runs in web browsers (client-side).\n-   Can also be used on servers (Node.js - not covered here).\n-   Works with HTML and CSS to create dynamic web applications.\n\n---\n\n## Variables: Storing Data\n\n-   Variables are containers for storing data values.\n-   Use the `var`, `let`, or `const` keywords to declare variables.\n\n---\n\n## Variable Declaration: `var`\n\n-   `var`: The older way to declare variables.  Function-scoped (more on scope later).\n    ```javascript\n    var myName = \"Alice\";\n    var age = 30;\n    ```\n\n---\n\n## Variable Declaration: `let`\n\n-   `let`: Introduced in ES6 (ES2015).  Block-scoped (more on scope later).  Recommended for most variables.\n    ```javascript\n    let city = \"New York\";\n    let population = 8400000;\n    ```\n\n---\n\n## Variable Declaration: `const`\n\n-   `const`:  Also introduced in ES6.  Block-scoped.  Used for variables whose values should *not* change after initialization (constants).\n    ```javascript\n    const PI = 3.14159;\n    const DAYS_IN_WEEK = 7;\n    // PI = 3.14;  // This would cause an error!\n    ```\n\n---\n\n## Variable Types: Primitive Types\n\n-   JavaScript has several primitive data types:\n    *   **String:** Text.  Enclosed in single or double quotes.\n        ```javascript\n        let greeting = \"Hello, world!\";\n        let name = 'Bob';\n        ```\n    *   **Number:** Integers and floating-point numbers.\n        ```javascript\n        let count = 10;\n        let price = 19.99;\n        ```\n    *   **Boolean:** `true` or `false`.\n        ```javascript\n        let isLoggedIn = true;\n        let isRaining = false;\n        ```\n---\n\n## Variable Types: Primitive Types\n\n-   JavaScript has several primitive data types:\n\n    *   **Undefined:**  A variable that has been declared but not assigned a value.\n        ```javascript\n        let myVariable;\n        console.log(myVariable); // Output: undefined\n        ```\n    *   **Null:** Represents the intentional absence of any object value.\n        ```javascript\n        let emptyValue = null;\n        ```\n\n---\n##  Variable Types: object Type\n* **Object:**\n    ```javascript\n    let person = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    age: 30\n    };\n    ```\n\n---\n\n## Variable Scope: `var` vs. `let`/`const`\n\n-   **Scope** determines where a variable is accessible.\n\n---\n\n## `var`: Function Scope\n\n-   Variables declared with `var` are *function-scoped*.  They are accessible within the function they are declared in, *even if declared inside a block*.\n    ```javascript\n    function myFunction() {\n      var x = 10;\n      if (true) {\n        var y = 20; // y is accessible outside this 'if' block\n      }\n      console.log(x); // 10\n      console.log(y); // 20\n    }\n    // console.log(x); // Error: x is not defined (outside the function)\n    ```\n\n---\n\n## `let` and `const`: Block Scope\n\n-   Variables declared with `let` and `const` are *block-scoped*.  They are only accessible within the block they are declared in (e.g., inside an `if` statement, `for` loop, or `{}` block).\n    ```javascript\n    function myFunction() {\n      let a = 5;\n      if (true) {\n        let b = 15; // b is only accessible within this 'if' block\n        const c = 25\n        console.log(a); // 5\n        console.log(b); //15\n      }\n      console.log(a); // 5\n      // console.log(b); // Error: b is not defined (outside the 'if' block)\n    }\n\n    ```\n    *   This makes `let` and `const` generally safer and easier to reason about.\n\n---\n\n## Functions: Reusable Blocks of Code\n\n-   Functions are blocks of code that can be defined and then (executed) later.\n-   Use the `function` keyword to define a function.\n    ```javascript\n    function greet(name) {\n      console.log(\"Hello, \" + name + \"!\");\n    }\n\n    greet(\"Alice\"); // Call the function. Output: Hello, Alice!\n    greet(\"Bob\");   // Output: Hello, Bob!\n    ```\n    *   `function greet(name)`: Defines a function named `greet` that takes one *parameter* (`name`).\n    *   `console.log(...)`:  Prints to the console (useful for debugging).\n    *   `greet(\"Alice\")`: *Calls* (invokes) the function, passing the *argument* `\"Alice\"`.\n\n---\n\n## Function Return Values\n\n-   Functions can *return* values using the `return` keyword.\n    ```javascript\n    function add(x, y) {\n      return x + y;\n    }\n\n    let sum = add(5, 3); // Call the function and store the returned value\n    console.log(sum); // Output: 8\n    ```\n    *   If no `return` statement is present, the function returns `undefined`.\n\n---\n\n## `setTimeout`: Asynchronous Execution\n\n-   `setTimeout` is a built-in JavaScript function that executes a function *after* a specified delay (in milliseconds).\n    ```javascript\n    function sayHello() {\n      console.log(\"Hello after 2 seconds!\");\n    }\n\n    setTimeout(sayHello, 2000); // Call sayHello after 2000ms (2 seconds)\n    console.log(\"This will be printed first.\");\n\n    ```\n    *   **Asynchronous Nature:** `setTimeout` is *asynchronous*.  This means it doesn't block the execution of other code.  The `console.log(\"This will be printed first.\")` line will execute *before* `sayHello` is called, even though it appears later in the code.  JavaScript continues executing the rest of your code while waiting for the timeout to expire.\n    *   `setTimeout(function, delay)`:\n        *   `function`: The function to be executed.\n        *   `delay`: The delay in milliseconds.\n\n---\n## `setTimeout` Example\n```javascript\nfunction delayedGreeting(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\nconsole.log(\"Starting...\");\nsetTimeout(delayedGreeting, 3000, \"Alice\"); // Pass \"Alice\" as an argument\nconsole.log(\"Waiting for the greeting...\");\n//Output\n//Starting...\n//Waiting for the greeting...\n//Hello, Alice!\n```\n*  Notice how the output is printed, illustrating the asynchronous behavior. The code after `setTimeout` doesn't wait.\n---\n## Comments:\nSingle-line comments:\n```js\n// This is a single-line comment.\n```\nMulti-line comments:\n```js\n/*\n  This is a\n  multi-line comment.\n*/\n```\n\n---\n## Operators:\n**Arithmetic Operators:**\n\n`+` (Addition)\n`-` (Subtraction)\n`*` (Multiplication)\n`/` (Division)\n`%` (Modulus - remainder of division)\n`**` (Exponentiation - ES2016)\n\n---\n\n**Assignment Operators:**\n\n`=` (Assign value)\n`+=` (Add and assign)\n`-=` (Subtract and assign)\n`*=` (Multiply and assign)\n`/=` (Divide and assign)\n`%=` (Modulus and assign)\n\n---\n\n**Comparison Operators:**\n\n`==` (Equal to - loose equality, checks value only)\n`===` (Strict equal to - checks value and type)\n`!=` (Not equal to - loose inequality)\n`!==` (Strict not equal to)\n`>` (Greater than)\n`<` (Less than)\n`>=` (Greater than or equal to)\n`<=` (Less than or equal to)\n\n---\n\n**Logical Operators:**\n\n`&&` (Logical AND)\n`||` (Logical OR)\n`!` (Logical NOT)\n\n\n\n\n\n\n\n---\n\n# DOM Manipulation and Selectors\n\nInteracting with HTML and CSS using JavaScript\n\n---\n\n## What is the DOM?\n\n-   **DOM:** Document Object Model.\n-   A tree-like representation of your HTML page.\n-   JavaScript can access and modify the DOM to change the page dynamically.\n- Think of the html as a tree and each element is a node, js will let as change does node.\n\n---\n\n## Selecting Elements: `getElementById`\n\n-   The most common way to select a *single* element.\n-   Selects an element based on its unique `id` attribute.\n    ```html\n    <h1 id=\"main-heading\">My Website</h1>\n    <p id=\"intro-paragraph\">Welcome!</p>\n\n    <script>\n      let heading = document.getElementById(\"main-heading\");\n      let paragraph = document.getElementById(\"intro-paragraph\");\n\n      console.log(heading); // Logs the <h1> element\n      console.log(paragraph); // Logs the <p> element\n    </script>\n    ```\n    *   `document.getElementById(\"elementId\")`: Returns the element with the matching ID, or `null` if no element is found.\n\n---\n\n## Selecting Elements: `querySelector`\n\n-   More versatile than `getElementById`.\n-   Selects the *first* element that matches a CSS selector.\n    ```html\n    <p class=\"highlight\">This is important.</p>\n    <p>This is regular text.</p>\n    <p class=\"highlight\">This is also important.</p>\n\n    <script>\n      let firstHighlight = document.querySelector(\".highlight\"); // Selects the first <p> with class=\"highlight\"\n      console.log(firstHighlight);\n    </script>\n    ```\n    *   `document.querySelector(\"cssSelector\")`:  Uses the same selectors you use in CSS (e.g., `.class`, `#id`, `element`, `element > child`).\n\n---\n\n## Selecting Elements: `querySelectorAll`\n- selects all the element that matches a CSS selector.\n\n```html\n<ul>\n    <li class=\"item\">Item 1</li>\n    <li class=\"item\">Item 2</li>\n    <li class=\"item\">Item 3</li>\n</ul>\n<script>\nconst listItems = document.querySelectorAll('.item');\n// listItems is now a NodeList of all elements with class 'item'\n// You can loop through a NodeList like an array\nfor (let i = 0; i < listItems.length; i++) {\n    listItems[i].style.color = 'blue'; // Changes text color of each item\n}\n</script>\n```\n\n---\n## Modifying Elements: `innerHTML`\n\n-   Gets or sets the *HTML content* of an element.\n    ```html\n    <div id=\"myDiv\">\n      <p>Original content.</p>\n    </div>\n\n    <script>\n      let myDiv = document.getElementById(\"myDiv\");\n      console.log(myDiv.innerHTML); // Output: <p>Original content.</p>\n\n      myDiv.innerHTML = \"<h2>New content!</h2>\"; // Changes the entire content of the div\n      console.log(myDiv.innerHTML); // Output: <h2>New content!</h2>\n    </script>\n    ```\n    *   **Caution:** Be careful when using `innerHTML` with user-provided input, as it can create security vulnerabilities (XSS - Cross-Site Scripting).\n\n---\n\n## Modifying Elements: `textContent`\n\n-   Gets or sets the *text content* of an element.  Safer than `innerHTML` for user input.\n    ```html\n    <p id=\"myParagraph\">This is <b>bold</b> text.</p>\n\n    <script>\n      let myParagraph = document.getElementById(\"myParagraph\");\n      console.log(myParagraph.textContent); // Output: This is bold text. (Ignores the <b> tag)\n\n      myParagraph.textContent = \"This is updated text.\"; // Replaces the text content\n    </script>\n    ```\n    *   `textContent` treats all content as plain text, even if it contains HTML tags.\n\n---\n\n## Modifying Element Styles\n\n-   You can directly change the CSS styles of an element using the `style` property.\n    ```html\n    <p id=\"styledParagraph\">This is a paragraph.</p>\n\n    <script>\n      let paragraph = document.getElementById(\"styledParagraph\");\n      paragraph.style.color = \"red\";\n      paragraph.style.fontSize = \"20px\";\n      paragraph.style.backgroundColor = \"yellow\";\n    </script>\n    ```\n    *   `element.style.propertyName = \"value\"`:  Use camelCase for CSS property names (e.g., `backgroundColor`, not `background-color`).\n\n---\n\n## Adding Event Listeners\n\n-   Make your page interactive by responding to user actions (events).\n-   `addEventListener` attaches a function to be called when a specific event occurs on an element.\n    ```html\n    <button id=\"myButton\">Click Me!</button>\n\n    <script>\n      let button = document.getElementById(\"myButton\");\n\n      button.addEventListener(\"click\", function() {\n        alert(\"Button clicked!\");\n      });\n    </script>\n    ```\n    *   `element.addEventListener(\"event\", function)`:\n        *   `\"event\"`: The name of the event (e.g., `\"click\"`, `\"mouseover\"`, `\"keydown\"`).\n        *   `function`: The function to be executed when the event occurs.\n\n\n---\n\n    ```html\n    <button id=\"myButton\">Click Me!</button>\n\n    <script>\n      let button = document.getElementById(\"myButton\");\n\n      button.addEventListener(\"click\", function() {\n        alert(\"Button clicked!\");\n      });\n    </script>\n    ```\n    *   `element.addEventListener(\"event\", function)`:\n        *   `\"event\"`: The name of the event (e.g., `\"click\"`, `\"mouseover\"`, `\"keydown\"`).\n        *   `function`: The function to be executed when the event occurs.\n\n\n\n---\n\n## Common Events\n\n-   `click`:  When the user clicks on an element.\n-   `mouseover`:  When the mouse pointer moves over an element.\n-   `mouseout`:  When the mouse pointer moves out of an element.\n-   `keydown`:  When a key is pressed down.\n-   `keyup`: When a key is released.\n-   `load`:  When the page or an element (like an image) has finished loading.\n-   `submit`: When form is submitted.\n---\n## Example: Changing Text on Click\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>DOM Example</title>\n</head>\n<body>\n\n<h1 id=\"myHeading\">Click Me</h1>\n<p id=\"myParagraph\">This is some text.</p>\n\n<script>\n  let heading = document.getElementById(\"myHeading\");\n  let paragraph = document.querySelector(\"#myParagraph\");\n\n  heading.addEventListener(\"click\", function() {\n    heading.textContent = \"Heading Changed!\";\n    paragraph.style.color = \"blue\";\n  });\n</script>\n\n</body>\n</html>\n```\n\n---\n\n## Example: Image Swap on Mouseover/Out\n```html\n<!DOCTYPE html>\n<html>\n<body>\n\n<img id=\"myImage\" src=\"image1.jpg\" alt=\"Image 1\">\n\n<script>\nlet image = document.getElementById(\"myImage\");\n\nimage.addEventListener(\"mouseover\", function() {\n  image.src = \"image2.jpg\";\n  image.alt = \"Image 2\";\n});\n\nimage.addEventListener(\"mouseout\", function() {\n  image.src = \"image1.jpg\";\n  image.alt = \"Image 1\";\n});\n</script>\n\n</body>\n</html>\n```\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Markdown Slides/3. css.md",
      "content": "---\nmarp: true\n---\n\n# 1. Introduction to CSS\n\n-   **What is CSS?** Cascading Style Sheets. It controls the presentation of web pages (layout, colors, fonts).  Separates *content* (HTML) from *presentation* (CSS).\n-   **How CSS Works with HTML:** CSS rules target HTML elements to style them.\n- **Methods to Apply CSS:**\n\n---\n\n## Applying CSS: Inline\n\n-   **Inline CSS:** Use the `style` attribute directly within HTML tags.\n    ```html\n    <p style=\"color: blue; font-size: 16px;\">This is a blue paragraph.</p>\n    ```\n    *   **Pros:** Quick changes, overrides other styles.\n    *   **Cons:** Hard to maintain, not reusable, mixes content and presentation.  *Generally avoid for larger projects.*\n\n---\n\n## Applying CSS: Internal\n\n-   **Internal CSS:** Use the `<style>` tag within the `<head>` section of your HTML document.\n    ```html\n    <head>\n      <style>\n        p {\n          color: green;\n          font-size: 18px;\n        }\n      </style>\n    </head>\n    ```\n    *   **Pros:** Good for single-page websites, overrides external styles.\n    *   **Cons:** Not reusable across multiple pages.\n\n---\n\n## Applying CSS: External\n\n-   **External CSS:** Create a separate `.css` file and link it to your HTML using the `<link>` tag.\n    ```html\n    <head>\n      <link rel=\"stylesheet\" href=\"styles.css\">\n    </head>\n    ```\n    ```css\n    /* styles.css */\n    p {\n      color: red;\n      font-size: 20px;\n    }\n    ```\n    *   **Pros:** Best for multi-page websites, clean separation of concerns, reusable, easier to maintain. *Recommended approach.*\n\n---\n\n# 2. CSS Selectors\n\n-   Selectors define which HTML elements the CSS rules apply to.\n\n---\n\n## Basic Selectors\n\n-   **Element Selector:** Targets elements by their tag name.\n    ```css\n    h1 {\n      color: purple;\n    } /* Styles all <h1> elements */\n    ```\n-   **Class Selector:** Targets elements with a specific class attribute.  Use a dot (`.`).\n    ```css\n    .highlight {\n      background-color: yellow;\n    } /* Styles all elements with class=\"highlight\" */\n    ```\n-   **ID Selector:** Targets a *single* element with a specific ID attribute.  Use a hash (`#`).  IDs should be unique on a page.\n    ```css\n    #main-header {\n      font-size: 30px;\n    } /* Styles the element with id=\"main-header\" */\n    ```\n\n---\n\n## Advanced Selectors: Grouping\n\n-   **Grouping Selector:** Applies the same styles to multiple selectors.  Separate selectors with commas.\n    ```css\n    h1, h2, h3 {\n      font-family: sans-serif;\n    } /* Styles h1, h2, and h3 elements */\n    ```\n\n---\n\n## Advanced Selectors: Descendant\n\n-   **Descendant Selector:** Targets elements that are *descendants* of another element (not just direct children).  Use a space.\n    ```css\n    div p {\n      color: gray;\n    } /* Styles all <p> elements inside <div> elements */\n    ```\n\n---\n\n## Advanced Selectors: Child\n\n-   **Child Selector:** Targets elements that are *direct children* of another element.  Use a greater-than sign (`>`).\n    ```css\n    div > p {\n      font-weight: bold;\n    } /* Styles <p> elements that are direct children of <div> */\n    ```\n\n---\n\n## Advanced Selectors: Attribute\n\n-   **Attribute Selector:** Targets elements based on their attributes and attribute values.\n    ```css\n    input[type=\"text\"] {\n      border: 1px solid black;\n    } /* Styles <input> elements with type=\"text\" */\n    ```\n\n---\n\n# 3. CSS Box Model\n\n-   Every HTML element is treated as a rectangular box.  The box model describes how the content, padding, border, and margin of an element are rendered.\n\n---\n\n## Box Model Components\n\n-   **Content:** The actual content of the element (text, image, etc.).\n-   **Padding:**  Space *inside* the element, between the content and the border.\n-   **Border:**  A line that surrounds the padding and content.\n-   **Margin:** Space *outside* the element, between the border and other elements.\n\n---\n## Box Model Example\n\n```css\ndiv {\n  width: 200px;\n  padding: 20px;\n  border: 5px solid black;\n  margin: 30px;\n}\n\n```\n* The content width is 200px\n* 20px of the apdding\n* The border 5px\n*  the margin 30px.\n\n---\n\n# 4. CSS Units & Sizing\n\n---\n\n## Absolute Units\n\n-   **px:** Pixels (most common absolute unit).  Fixed size.\n- **cm:** Centimeters.\n-   **mm:** Millimeters.\n- *Note*: Absolute units don't scale well on different screen sizes.\n\n---\n\n## Relative Units\n\n-   **%:** Percentage.  Relative to the parent element's size.\n-   **em:** Relative to the font-size of the *element*.\n-   **vw:** Viewport width (1vw = 1% of the viewport width).\n- **vh:** Viewport height (1vh = 1% of the viewport height).\n- *Note*: Relative units are crucial for creating responsive designs.\n\n---\n\n## Best Practices for Responsiveness\n\n-   Use relative units (%) whenever possible for widths, heights, and spacing.\n-   Use `em` or `rem` for font sizes.\n- Use media queries (not covered here) to adjust styles for different screen sizes.\n\n---\n\n# 5. Colors & Backgrounds\n\n---\n\n## Defining Colors\n\n-   **Named Colors:**  `red`, `blue`, `green`, `black`, etc. (limited set).\n-   **RGB:**  `rgb(red, green, blue)`  Values from 0 to 255.\n    ```css\n    p {\n      color: rgb(255, 0, 0); /* Red */\n    }\n    ```\n\n---\n\n## Background Properties\n- `background-color`: Sets the background color\n- `background-image`: Use URL() TO Sets an image as the background:\n\n```css\nbody {\n  background-image: url(\"background.jpg\");\n}\n```\n\n-`background-size`: control the size of background\n```css\ndiv {\n    background-size: cover; /*cover, contain, auto, a specific length, or percentages:*/\n}\n```\n\n---\n\n# 6. Text & Fonts\n\n---\n\n## Font Properties\n\n-   `font-family`: Specifies the font.  Use fallback fonts.\n    ```css\n    p {\n      font-family: \"Arial\", sans-serif; /* Arial, or any sans-serif if Arial isn't available */\n    }\n    ```\n-   `font-size`: Sets the font size (use px, em, rem, etc.).\n-   `font-weight`: Sets the boldness (normal, bold, 100-900).\n\n---\n\n## Text Alignment\n\n-   `text-align`: Controls horizontal alignment:\n    *   `left` (default)\n    *   `right`\n    *   `center`\n    *   `justify` (stretches text to fill the line)\n\n---\n\n# 7. Positioning & Layouts\n\n---\n\n## Display Types\n\n-   `display`: Controls how an element is displayed.\n    *   `block`: Takes up the full width available, starts on a new line.  (e.g., `<div>`, `<p>`, `<h1>`-`<h6>`, `<form>`).\n    *   `inline`: Takes up only as much width as necessary, does *not* start on a new line.  (e.g., `<span>`, `<a>`, `<img>`).\n    *   `inline-block`:  Like inline, but you *can* set width and height.\n\n---\n## Positioning: `static`\n-**Static (default):** Elements are positioned according to the normal flow of the document. The top, right, bottom, left, and z-index properties have no effect.\n\n---\n## Positioning: `relative`\n\n-   **Relative:**  Positioned *relative to its normal position*.  Setting `top`, `right`, `bottom`, `left` properties will move it from its normal position. Other content will *not* adjust to fill the gap.\n\n---\n\n## Positioning: `absolute`\n\n-   **Absolute:**  Positioned *relative to the nearest positioned ancestor* (an ancestor with `position` set to something other than `static`).  If there's no positioned ancestor, it's positioned relative to the initial containing block (usually the `<html>` element).  *Removed from the normal document flow* - other content will flow as if the absolutely positioned element isn't there.\n\n---\n\n## Positioning: `fixed`\n\n-   **Fixed:**  Positioned *relative to the viewport* (the browser window).  It stays in the same place even if the page is scrolled.  *Removed from the normal document flow*.\n\n---\n\n# 8. CSS Flexbox (Important for Layouts)\n\n-   Flexbox is a one-dimensional layout system (rows *or* columns).  Makes it easy to align and distribute space among items in a container.\n\n---\n\n## Flexbox Properties\n\n-   `display: flex;`  Makes an element a flex container.  Its direct children become flex items.\n-   `justify-content`: Aligns items *horizontally* within the container.\n    *   `flex-start` (default): Items at the start.\n    *   `flex-end`: Items at the end.\n    *   `center`: Items centered.\n    *   `space-between`: Space between items.\n    *   `space-around`: Space around items.\n    *   `space-evenly`: equal between and around\n\n---\n\n-   `align-items`: Aligns items *vertically* within the container.\n    *   `stretch` (default): Items stretch to fill the container.\n    *   `flex-start`: Items at the top.\n    *   `flex-end`: Items at the bottom.\n    *   `center`: Items centered.\n    *   `baseline`: Items aligned by their baselines.\n-    `flex-wrap` :Specifies whether the flex items should wrap or not.\n    *  `nowrap`\n    *   `wrap`\n    *    `wrap-reverse`\n-   `flex-grow`: Specifies how much the item will grow relative to the rest\n\n---\n\n\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n.flex-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px; /* Just for demonstration */\n  background-color: lightgray;\n}\n\n.flex-item {\n  width: 50px;\n  height: 50px;\n  background-color: lightblue;\n  margin: 10px;\n}\n</style>\n</head>\n<body>\n\n<div class=\"flex-container\">\n  <div class=\"flex-item\">1</div>\n  <div class=\"flex-item\">2</div>\n  <div class=\"flex-item\">3</div>\n</div>\n\n</body>\n</html>\n```\n\n---\n\n# 9. CSS Grid (For Advanced Layouts)\n\nCSS Grid is another powerful layout system, but it's two-dimensional (rows *and* columns). It's excellent for creating complex layouts, but it has a steeper learning curve than Flexbox.  You should learn it later on your own as you progress in your web development journey. It's a very important tool, but for now, focus on the fundamentals.\n\n---\n\n# 10. Transitions\n\n-   `transition`: Creates smooth animations between different states of an element (e.g., on hover).\n    ```css\n    button {\n      background-color: blue;\n      color: white;\n      transition: background-color 0.3s ease; /* Smoothly change background-color over 0.3 seconds */\n    }\n\n    button:hover {\n      background-color: darkblue;\n    }\n    ```\n    *   Property: The CSS property to transition (e.g., `background-color`, `width`, `opacity`).\n    *   Duration: How long the transition should take (e.g., `0.3s`, `1s`).\n    *    Timing Function: The speed curve of the transition (`ease`, `linear`, `ease-in`, `ease-out`, `ease-in-out`).\n\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Markdown Slides/2. html.md",
      "content": "---\nmarp: true\n---\n\n\n# HTML Tags Explanation\n\n**A Concise Guide to Essential HTML Elements**\n\n---\n\n## Basic Structure: The Document Foundation\n\n-   `<html>`:  **The Root Element:**  Encapsulates the entire HTML document.\n-   `<head>`: **Meta-Information Hub:** Contains metadata. Invisible to users, but crucial for browsers and SEO.\n-   `<body>`: **Visible Content Container:** Holds content displayed to the user.\n\n---\n\n## Content Division: Structuring\n\n-   `<div>`: **Versatile Division:** Block-level container for layout and styling with CSS.\n    ```html\n    <div>\n      <p>This is a paragraph inside a div.</p>\n    </div>\n    ```\n-   `<span>`: **Inline Grouping:** Groups text or inline elements.\n\n    ```html\n    <p>This is some text with a <span style=\"color:blue;\">span</span> element.</p>\n    ```\n\n---\n\n## Headings: Content Hierarchy\n\n-   `<h1>` to `<h6>`: **Six Levels:**  Define headings (`<h1>` most important, `<h6>` least).\n    ```html\n    <h1>Main Heading</h1>\n    <h2>Subheading</h2>\n    ```\n\n---\n\n## Paragraphs and Links\n\n-   `<p>`: **Paragraph:** Represents a block of text.\n    ```html\n    <p>This is a paragraph of text.</p>\n    ```\n-   `<a>`: **Hyperlink:** Links to other pages or locations.\n    ```html\n    <a href=\"https://www.example.com\">Visit Example</a>\n    ```\n\n---\n\n## Images: Adding Visuals\n\n-   `<img>`: **Embed Images:** Displays images.\n    ```html\n    <img src=\"image.jpg\" alt=\"Description of the image\">\n    ```\n    *   `src`: Image source.\n    *   `alt`: Alternative text (accessibility).\n\n---\n\n## Lists: Organizing Information\n\n-   `<ul>`: **Unordered Lists:** Bullet points.\n    ```html\n      <ul>\n        <li>Item 1</li>\n        <li>Item 2</li>\n      </ul>\n    ```\n-   `<ol>`: **Ordered Lists:** Numbered.\n    ```html\n    <ol>\n      <li>First step</li>\n      <li>Second step</li>\n    </ol>\n    ```\n-   `<li>`: **List Item:** Defines each item.\n\n---\n\n## Tables: Basic Structure\n\n-   `<table>`: **Table Container:** Defines the table.\n-   `<tr>`: **Table Row:** Defines a row.\n-   `<th>`: **Header Cell:** Header for column/row.\n-   `<td>`: **Data Cell:** Contains data.\n\n---\n\n## Tables: Example\n\n```html\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Email</th>\n  </tr>\n  <tr>\n    <td>John Doe</td>\n    <td>john@example.com</td>\n  </tr>\n</table>\n```\n\n---\n\n## Forms - Part 1: Input Basics\n\n-   `<form>`: **Form Container:** Collects input.\n-   `<input>`: **Input Fields:** Text, password, etc.\n    ```html\n    <input type=\"text\" name=\"username\" placeholder=\"Enter username\">\n    ```\n-   `<button>`: **Button:** Submits forms.\n    ```html\n    <button type=\"submit\">Submit</button>\n    ```\n\n---\n\n## Forms - Part 2: More Inputs\n\n-   `<label>`: **Input Labels:** Improves accessibility.\n\n    ```html\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" id=\"username\" name=\"username\">\n    ```\n-   `<textarea>`: **Multiline Text:** For comments.\n    ```html\n      <textarea name=\"message\" rows=\"4\" cols=\"50\">Enter message here...</textarea>\n    ```\n\n---\n\n## Forms - Part 3: Select\n\n-   `<select>`: **Dropdown Menu:** Select options.\n    ```html\n    <select name=\"country\">\n        <option value=\"usa\">USA</option>\n        <option value=\"canada\">Canada</option>\n    </select>\n    ```\n-   `<option>`: **Dropdown Options:** Choices in `<select>`.\n\n---\n\n## Semantic Elements\n\n-   `<header>`: **Document/Section Header:**  Introductory content.\n-   `<footer>`: **Document/Section Footer:**  Footer information.\n- `<nav>`: **Navigation Links** Contains a set of navigation links.\n```html\n<nav>\n    <a href=\"/home\">Home</a> |\n    <a href=\"/about\">About</a> |\n    <a href=\"/contact\">Contact</a>\n</nav>\n```\n---\n\n\n## Text Formatting\n\n-   `<em>`: **Emphasized Text:** Italics.\n-   `<strong>`: **Important Text:** Bold.\n    ```html\n    <p>This is <em>emphasized</em> and this is <strong>strong</strong> text.</p>\n    ```\n\n---\n\n## Line Breaks and Horizontal Rules\n\n-   `<br>`: **Line Break:** Forces a line break.\n-   `<hr>`: **Horizontal Rule:** Separates content.\n\n---\n\n## Linking and Scripting\n\n-   `<link>`: **External Resources:** Links to CSS.\n    ```html\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    ```\n-   `<script>`: **JavaScript Code:** Embeds/links JS.\n    ```html\n     <script src=\"script.js\"></script>\n    ```\n-   `<style>`: **Internal CSS:** CSS within HTML.\n\n---\n\n## Media\n\n-   `<audio>`: **Embeds Audio:**  Includes audio.\n-   `<video>`: **Embeds Video:** Includes video.\n    ```html\n    <video width=\"320\" height=\"240\" controls>\n       <source src=\"movie.mp4\" type=\"video/mp4\">\n       Your browser does not support the video tag.\n    </video>\n    ```\n---\n## Quotes\n- `<blockquote>`: **Long Quotation**\n```html\n<blockquote cite=\"https://www.example.com/source\">\n  This is a long quotation from a reputable source.\n</blockquote>\n```\n\n- `<q>`: **short Quotation**\n```html\n<p>He said, <q>This is a short, inline quote.</q></p>\n\n```\n---\n## Abbreviations\n\n-`<abbr>`: **define abbreviation**\n```html\nThe <abbr title=\"World Health Organization\">WHO</abbr> was founded in 1948.\n\n```\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Markdown Slides/1. intro.md",
      "content": "---\nmarp: true\n---\n\n# HOW THE WEB WORKS BEHIND THE SCENES\n\n---\n\n## 1. What is the Web?\n\n*   **Definition:** The Web is a vast, interconnected network of resources accessible via the Internet. It comprises websites, web applications, and services that are hosted on servers around the globe.\n*  The World Wide Web (WWW) is a system of interlinked hypertext documents accessed via the Internet.\n* It is a way to share information globally using a standardized set of protocols and technologies.\n\n---\n\n## Components and Purpose of the Web\n\n*   **Components:**\n    *   **Websites & Webpages:** Collections of files (HTML, CSS, JavaScript, images) that render the visual and interactive content.\n    *   **Protocols:** Standards like HTTP/HTTPS govern the exchange of information between clients and servers.\n*   **Purpose:** To facilitate the exchange and display of digital content, enabling seamless communication and interaction between users and services.\n\n---\n\n## 2. Client-Server Architecture\n\n*   **Client:**\n    *   **Definition:** A client is any device (e.g., computer, smartphone, tablet) that accesses web services.\n    *   **Role:** It sends requests for data (like webpages) to servers.\n    *   **Example:** Your web browser (Chrome, Firefox, etc.) that fetches and displays web content.\n\n---\n\n## Server in the Client-Server Model\n\n*   **Server:**\n    *   **Definition:** A server is a powerful computer or a set of computers that stores, processes, and delivers web content.\n    *   **Role:** It listens for incoming client requests, processes them (possibly querying databases or running code), and sends back the requested content.\n    *   **Example:** A hosting server running a web application that serves content to millions of users simultaneously.\n* **How it works:** The client sends a request to the server, which processes the request and sends back the appropriate response.\n\n---\n\n\n\n## 2. How a Webpage Gets Loaded: Requests and Responses\n\n*   **Step 1: URL Request Initiation**\n    *   When you enter a URL in your browser, it translates the address into a series of network requests.\n\n---\n\n## DNS Lookup\n\n*   **Step 2: DNS Lookup**\n    *   The browser contacts a DNS (Domain Name System) server to resolve the human-readable domain (e.g., `example.com`) into an IP address that points to the server hosting the website.\n\n---\n\n## Making the Connection\n\n*   **Step 3: Connecting to the Server**\n    *   Your browser uses the IP address to connect to the server\n    *   If the website uses HTTPS, a security handshake happens to make the connection safe\n\n---\n\n## Asking for the Webpage\n\n*   **Step 4: Making the Request**\n    *   Your browser asks the server for the webpage you want to see\n    *   The request includes:\n        *   **What to do:** Get a page, submit a form, etc.\n        *   **Browser info:** What kind of browser you're using\n        *   **Extra data:** Any information you're sending (like form data)\n\n---\n\n## Server Processing and Response\n\n*   **Step 5: Server Processing and Response**\n    *   The server processes the request—this may involve running server-side scripts, querying databases, or reading static files.\n    *   It then sends back an HTTP response which includes:\n        *   **Status Code:** Indicates success (200), redirection (3xx), error (4xx/5xx), etc.\n        *   **Headers:** Metadata about the response (e.g., content type, caching policies).\n        *   **Body:** The actual content (HTML, JSON, images, etc.).\n\n---\n## Rendering\n\n* **Step 6: Rendering the webpage**\n    * The browser receives the response, parses the HTML, loads CSS and\nJavaScript, and finally renders the webpage for you to interact with.\n\n---\n\n## 4. What is DNS (Domain Name System)?\n\n*   **Definition:** DNS is the Internet's system for converting human-friendly domain names (like `www.example.com`) into IP addresses (like `192.0.2.1`), which are used by computers to identify each other on the network.\n* **How it works:** When you type a URL, the DNS resolves the domain name to the corresponding IP address, allowing the browser to connect to the correct server.\n---\n\n## DNS Functionality\n\n*   **Functionality:**\n    *   **Lookup Process:** When you type a URL, your browser sends a request to a DNS server to get the corresponding IP address.\n    *   **Hierarchy:** The DNS system is hierarchical and distributed, ensuring reliability and scalability. It comprises root servers, TLD (Top-Level Domain) servers, and authoritative name servers.\n    *   **Efficiency:** DNS caching improves speed by temporarily storing recent domain resolutions locally, reducing the need for repeated lookups.\n\n---\n## Summary\n\n*   The web is a system of interlinked documents accessed via the Internet.\n*   The client-server model enables communication between users and servers.\n*  The Internet uses protocols and data packets to transmit information.\n* Web pages are loaded through requests and responses.\n*  DNS translates domain names into IP addresses.\n\n---\n\n## Conclusion\n\n*    **Integration of Components:** The web relies on a combination of client-server architecture, standardized protocols (HTTP/HTTPS), and the DNS system to deliver content efficiently and securely.\n*    **Behind-the-Scenes Complexity:** While users interact with a simple interface (like a browser), a series of complex, well-orchestrated steps occur seamlessly to fetch and render webpages.\n*    **Relevance for Web Developers:** Understanding these fundamentals is crucial for optimizing performance.",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Describtion/LoginPage.md",
      "content": "\n# Login Page Project  \n\n## Overview  \nA basic authentication system that demonstrates form validation and user verification using JavaScript arrays. This project covers fundamental concepts of user input handling and data validation.  \n\n## Learning Objectives  \n- Form handling in JavaScript  \n- Array manipulation and data storage  \n- Input validation techniques  \n- Basic security concepts  \n\n## Features  \n- Username and password input fields using arrays and JSON  \n- Example:  \n  ```json\n  [\n    { \"username\": \"user1\", \"password\": \"pass123\" },\n    { \"username\": \"admin\", \"password\": \"admin123\" }\n  ]\n  ```  \n- Login validation against stored user data  \n- Success/Error message display  \n\n## Implementation Guide  \n\n### HTML Structure  \n- Create a clean, centered login form  \n- Include:  \n  - Username input field  \n  - Password input field (`type=\"password\"`)  \n  - Login button  \n  - Error/Success message container  \n\n### CSS Styling  \n- Style form elements professionally  \n- Add visual feedback for input states  \n- Ensure responsiveness  \n- Implement subtle animations for interactions, hover effects, and validation feedback  \n\n### JavaScript Implementation  \n\n```javascript\n// Example user data structure\nconst users = [\n  { username: 'user1', password: 'pass123' },\n  { username: 'admin', password: 'admin123' }\n];\n```\n\n## Security Considerations  \n\n### 1. Password Handling  \n- Never store passwords in plain text  \n- Use password masking in the input field  \n- Add a \"Show Password\" toggle  \n\n### 2. Input Validation  \n- Sanitize user inputs (e.g., use `trim()` in JavaScript)  \n- Prevent empty submissions  \n\n### 3. User Experience  \n- Display appropriate error messages  \n- Clear the password field after failed attempts  \n- Check for empty fields  \n- Manage success/error states effectively  \n\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Describtion/ProgressBarWithAnimationControls.md",
      "content": "\n# Progress Bar with Animation Controls Project  \n\n## Overview  \n\nAn interactive progress bar that demonstrates CSS animations, timing functions, and JavaScript animation control. This project teaches fundamental concepts of web animations and user interaction.  \n\n## Learning Objectives  \n\n- CSS animations and transitions  \n- CSS custom properties  \n- Event handling  \n\n## Features  \n\n### Animation Styles  \n\n- **Linear** (constant speed)  \n- **Ease-in** (slow start, fast end)  \n- **Ease-out** (fast start, slow end)  \n- **Ease-in-out** (slow-fast-slow)  \n\n### Controls  \n\n- Duration input  \n- Start/Pause/Reset buttons  \n- Animation style selector  \n- Progress percentage display  \n- Custom timing function editor  \n\n## Common Challenges & Tips  \n\n### 1. Animation Performance  \n\n- Use `transform: translateX()` instead of modifying `width`.  \n  - Modifying `width` forces a layout recalculation, slowing down animations.  \n  - `transform` is handled by the GPU, making animations smoother.  \n\n### 2. How `setTimeout` Works  \n\n- `setTimeout(callback, delay)` schedules a function to run after a set time.  \n- It does not guarantee exact timing, as execution depends on the event loop.  \n- In animations, `setTimeout` can be used to update an element at fixed intervals.  \n\n**Example:**  \n\n```js\nsetTimeout(() => {\n  console.log(\"This runs after 1 second\");\n}, 1000);\n```\n\n### 3. How `translateX` Works  \n\n- `translateX(value)` moves an element horizontally by the specified amount.  \n- It does not affect layout flow, making it more efficient than changing `width` or `left`.  \n- For a progress bar, `translateX(100%)` moves it fully across its container.  \n\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Describtion/app.md",
      "content": "# Web Development Workshop Projects Guide\n\n## Workshop Overview\nThis workshop provides a hands-on learning experience through 9 practical projects, each focusing on different aspects of web development. Projects are organized by difficulty and concept coverage.\n\n## Project Organization\nEach project is contained in its own directory with:\n- Complete source code\n- Step-by-step instructions\n- Learning objectives\n- Common challenges and solutions\n- Testing guidelines\n- Bonus features\n\n## Learning Path\n\n### Beginner Level\n1. **Basic Calculator**\n   - First steps with DOM manipulation\n   - Basic JavaScript functions\n   - Event handling fundamentals\n   - Simple CSS styling\n\n2. **Light/Dark Mode Toggle**\n   - CSS variables introduction\n   - Theme management\n   - localStorage basics\n   - User preference handling\n\n3. **Word Counter**\n   - String manipulation\n   - Real-time DOM updates\n   - Regular expressions basics\n   - Input event handling\n\n### Intermediate Level\n4. **Image Slider**\n   - Advanced DOM manipulation\n   - CSS transitions and transforms\n   - Animation timing\n   - Touch events (optional)\n\n5. **Todo List**\n   - CRUD operations\n   - Data persistence\n   - Array methods\n   - Event delegation\n\n6. **Login Page**\n   - Form handling\n   - Input validation\n   - Basic security concepts\n   - User feedback\n\n### Advanced Level\n7. **Password Generator**\n   - Complex string manipulation\n   - Random number generation\n   - Security considerations\n   - Copy to clipboard API\n\n8. **Unit Converter**\n   - API integration\n   - Number precision\n   - Multiple conversion types\n   - Real-time calculations\n\n9. **Progress Bar with Animation Controls**\n   - Advanced CSS animations\n   - requestAnimationFrame\n   - Timing functions\n   - Performance optimization\n\n## Workshop Structure\n\n### Per-Project Resources\n- **Documentation**\n  - Project requirements\n  - Implementation guide\n  - Best practices\n  - Common pitfalls\n\n- **Code Examples**\n  - Starter templates\n  - Solution code\n  - Alternative implementations\n  - Bonus features\n\n- **Testing Materials**\n  - Test cases\n  - Edge cases\n  - Performance benchmarks\n  - Accessibility checks\n\n### Support Resources\n- **Online Tools**\n  - Code playgrounds\n  - CSS animation tools\n  - API testing tools\n  - Performance monitoring\n\n- **Reference Materials**\n  - MDN documentation links\n  - Best practices guides\n  - Browser compatibility tables\n  - Performance optimization tips\n\n## Project Interdependencies\n\n### Shared Concepts\n1. **DOM Manipulation**\n   - Calculator\n   - Image Slider\n   - Todo List\n\n2. **Event Handling**\n   - Word Counter\n   - Progress Bar\n   - Login Page\n\n3. **Data Management**\n   - Todo List\n   - Unit Converter\n   - Password Generator\n\n4. **Animations**\n   - Image Slider\n   - Progress Bar\n   - Light/Dark Mode\n\n## Workshop Tips\n\n### Best Practices\n- Write clean, commented code\n- Follow consistent naming conventions\n- Use semantic HTML\n- Implement proper error handling\n- Consider accessibility\n- Test cross-browser compatibility\n\n### Common Challenges\n- Browser compatibility issues\n- Performance optimization\n- Mobile responsiveness\n- Error handling\n- Data persistence\n- Animation performance\n\n### Development Flow\n1. Understand requirements\n2. Plan implementation\n3. Write basic functionality\n4. Add styling\n5. Implement advanced features\n6. Test thoroughly\n7. Optimize performance\n8. Add bonus features\n\n## Additional Resources\n\n### Development Tools\n- VS Code with live server\n- Chrome DevTools\n- Git for version control\n- Browser developer tools\n\n### Learning Resources\n- MDN Web Docs\n- CSS-Tricks\n- JavaScript.info\n- Web.dev\n\n## Workshop Goals\nBy completing these projects, participants will:\n- Master fundamental web technologies\n- Build practical, real-world applications\n- Learn modern development practices\n- Understand performance optimization\n- Gain debugging experience\n- Create portfolio-worthy projects\n\n### **1. Basic Calculator**\n\nA **simple and interactive calculator** that allows users to perform **basic arithmetic operations** like:\n\n- **Addition (+)**\n- **Subtraction (-)**\n- **Multiplication (*)**\n- **Division (/)**\n\nUsers enter numbers, select an operation, and see the result instantly. The calculator will have a **clear button** to reset the inputs.\n\n---\n\n### **2. Image Slider**\n\nA **basic image carousel** where users can:\n\n- Click **\"Next\" or \"Previous\" buttons** to slide between images.\n- View images **one at a time** with smooth transitions.\n- Optionally, enable **automatic sliding** every few seconds.\n\nThis helps users **learn how to manipulate the DOM** and create animations in JavaScript.\n\n---\n\n### **3. Light/Dark Mode Toggle**\n\nA **simple theme switcher** that lets users switch between:\n\n- **Light mode** (white background, dark text)\n- **Dark mode** (dark background, light text)\n\nThe mode is applied instantly when the user clicks the **toggle button**, and the website remembers their choice (using local storage).\n\n---\n\n### **4. Simple Password Generator**\n\nA **random password generator** where users can customize:\n\n- **Password length** (e.g., 8, 12, 16 characters)\n- **Character types** (Numbers, lowercase, uppercase, symbols)\n- **Difficulty level** (Easy, Medium, Hard)\n\nWhen they click **\"Generate\"**, a random password appears with a **copy button** to copy it to the clipboard.\n\n---\n\n### **5. Login Page (Username & Password Validation in JS Array)**\n\nA **basic login form** where:\n\n- Users enter a **username and password**.\n- The script **checks the credentials** against a predefined **array of users** in JavaScript.\n- If correct, a **\"Login Successful\"** message appears; otherwise, an error message is displayed.\n\nThis helps beginners understand **form validation** in JavaScript.\n\n---\n\n### **6. To-Do List**\n\nA **simple task manager** that allows users to:\n\n- **Add new tasks** by typing and pressing enter.\n- **Mark tasks as done** (checked tasks will have a **strikethrough effect**).\n- **Delete tasks** when no longer needed.\n\nThis teaches **DOM manipulation and event handling** in JavaScript.\n\n---\n\n### **7. Unit Converter**\n\nA **basic converter** with three sections:  \n **Currency Converter** – Converts **USD ↔ DZD, EUR ↔ DZD**.  \n **Temperature Converter** – Converts **Celsius ↔ Fahrenheit**.  \n **Measurement Converter** – Converts **Meters ↔ Feet, Kilograms ↔ Pounds, etc.**.\n\nUsers input a value, select a unit, and get the **converted result instantly**.\n\n---\n\n### **8. Word Counter**\n\nA **real-time text analysis tool** that counts:\n\n- **Words**\n- **Characters**\n- **Numbers**\n\nIt also has two sliders to:\n\n- **Increase/decrease line spacing**.\n- **Increase/decrease word spacing**.\n\nPerfect for **learning how to handle text inputs dynamically**.\n\n---\n\n### **9. Progress Bar with Animation Controls**\n\nA **customizable progress bar** where users can:\n\n- Enter a **duration** (e.g., 10 seconds).\n- Choose an **animation style**:\n    - **Linear** (constant speed)\n    - **Ease-in** (slow start, fast end)\n    - **Ease-out** (fast start, slow end)\n    - **Ease-in-out** (slow-fast-slow)\n    - **Cubic** (smooth acceleration and deceleration)\n\nThe progress bar fills smoothly according to the selected style.\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Describtion/WordCounter.md",
      "content": "# Word Counter Project\n\n## Overview\n\nA real-time text analysis tool that provides instant feedback on text properties. This project teaches string manipulation, regular expressions, and dynamic DOM updates.\n\n## Features\n\n### Text Statistics\n\n- Word count\n- Character count (without spaces)\n\n### Text Formatting\n\n- Line spacing adjustment\n- Word spacing adjustment\n- Text alignment options\n- Font size control\n- Line height control\n\n## Best Practices\n\n*   **Small Functions:** Create functions for-specific tasks (e.g., `countWords()`, `countChars()`).\n*   **Clear Variables:** Use descriptive names (e.g., `textArea` instead of `ta`).\n*   **Limit Globals:** Define variables inside functions where possible.\n\n## Useful JavaScript Functions\n\n*   **`element.addEventListener('event', function)`**: Runs code when an event happens (like 'input' or 'click').\n    ```javascript\n    textArea.addEventListener('input', updateCounts);\n    ```\n\n*   **Real-time Updates:** To make your counts update *as the user types*, use the `'input'` event with `addEventListener` on your text area. Inside the function that runs for the 'input' event, call your counting functions (like `countWords()` and `countChars()`) and update the display on the page.\n\n*   **`string.trim()`**: Removes spaces from the start/end of text.\n    ```javascript\n    let clean = \"  text \".trim(); // \"text\"\n    ```\n*   **`string.split('separator')`**: Turns text into a list (array) based on the separator. Use `' '` for words.\n    ```javascript\n    let words = \"one two\".split(' '); // [\"one\", \"two\"]\n    ```\n*   **`Math.ceil(num)`**: Rounds number UP. `Math.ceil(2.1)` is `3`.\n*   **`Math.floor(num)`**: Rounds number DOWN. `Math.floor(2.9)` is `2`.\n*   **`Math.round(num)`**: Rounds to nearest whole number. `Math.round(2.5)` is `3`.\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Describtion/UnitConverter.md",
      "content": "# Unit Converter Project\n\n## Overview\nA comprehensive unit conversion tool that handles multiple conversion types. This project teaches number handling, input validation, and working with formulas in JavaScript.\n\n## Learning Objectives\n- Number manipulation in JavaScript\n- Input validation (checking for valid numbers)\n- Working with formulas\n\n## Features\n### Currency Converter\n- USD ↔ DZD\n- EUR ↔ DZD\n  *(Tip: Use an object to store conversion rates)*\n\n### Temperature Converter\n- Celsius ↔ Fahrenheit\n- Celsius ↔ Kelvin\n- Fahrenheit ↔ Kelvin\n  *(Tip: Use functions for each formula)*\n\n### Measurement Converter\n- Length (Meters ↔ Feet, etc.)\n- Weight (Kilograms ↔ Pounds)\n- Volume (Liters ↔ Gallons)\n  *(Tip: Group related conversions)*\n\n\n## Common Challenges & Tips\n1.  **Number Precision**\n    - Use `toFixed()` to control how many decimal places are shown.\n\n2.  **User Experience**\n    - **Real-time Updates:** Use the `input` event on number fields to recalculate immediately.\n    - **Clear Display:** Show the units (e.g., '°C', 'kg') next to the numbers.\n\n## Best Practices\n*   **Specific Functions:** Create functions for each conversion type (e.g., `celsiusToFahrenheit(c)`, `usdToDzd(usd)`).\n*   **Validate Input:** Check if the user entered a valid number before calculating. Use `isNaN()`.\n*   **Clear Variables:** Use names like `inputValue`, `conversionRate`, `result`.\n*   **Error Messages:** Tell the user if their input is invalid (e.g., \"Please enter a valid number\").\n*   **Data Structures:** Use objects (`{}`) to store conversion rates or formulas logically.\n\n## Useful JavaScript Functions\n\n*   **`element.addEventListener('input', function)`**: Runs code when a number input changes.\n    ```javascript\n    inputField.addEventListener('input', convertUnits);\n    ```\n*   **`parseFloat(string)` / `Number(string)`**: Converts text input into a number.\n    ```javascript\n    let numValue = parseFloat(inputField.value);\n    ```\n*   **`isNaN(value)`**: Checks if a value is Not-a-Number. Useful for validation.\n    ```javascript\n    if (isNaN(numValue)) { alert(\"Invalid number!\"); }\n    ```\n*   **Arithmetic (`+ - * /`)**: Basic math for applying conversion formulas.\n    ```javascript\n    let fahrenheit = (celsius * 9/5) + 32;\n    ```\n*   **`number.toFixed(digits)`**: Formats a number to have a specific number of decimal places (returns a string).\n    ```javascript\n    let displayResult = result.toFixed(2); // e.g., 123.45\n    ```\n*   **Objects (`{}`)**: Store related data like conversion rates.\n    *Example for Currency Rates:*\n    ```javascript\n    // Store rates in an object\n    const exchangeRates = {\n      'USD_TO_DZD': 135.50,\n      'EUR_TO_DZD': 145.20,\n      // Add more rates here...\n      'DZD_TO_USD': 1 / 135.50 // For reverse conversion\n    };\n\n    let amountInUSD = 10;\n    let amountInDZD = amountInUSD * exchangeRates['USD_TO_DZD'];\n    console.log(amountInDZD.toFixed(2)); // Output: 1355.00\n    ```\n\n## Bonus Features (optional but you learn a lot)\n- Reverse conversion button\n- Multiple values at once\n- Custom unit definitions\n- Clear input buttons\n- Copy result button\n\n\n\n\n\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Describtion/ToDoList.md",
      "content": "# Todo List Project\n\n## Overview\nAn interactive task management application built with JavaScript. This project focuses on manipulating the web page directly (DOM manipulation) and responding to user actions (event handling).\n\n**Note:** This version does *not* save your tasks. If you refresh the page, the list will reset. Saving data is outside the scope of this basic project.\n\n## Learning Objectives\n- DOM manipulation (creating, adding, removing HTML elements)\n- Event handling (reacting to clicks, typing)\n- Using basic JavaScript logic to manage a list\n\n## Features\n- **Add New Tasks:** Input field to type a task and a button to add it to the list.\n- **Task Display:** Each task should appear as a list item (`<li>`).\n- **Mark as Complete:** A way to toggle the completion status of a task (e.g., using a checkbox or button, visually indicated by a line-through or different style).\n- **Delete Tasks:** A button next to each task to remove it from the list.\n- **Task Highlighting (Optional):** Add colored tags/indicators (e.g., orange, red, green) to tasks. This can be done by adding specific CSS classes to the task elements.\n- **Search/Filter:** An input field to type text, hiding tasks that don't match the typed text.\n\n## Implementation Tips\n\n*   **Structure:** Use an unordered list (`<ul>`) to hold your task items (`<li>`). Each `<li>` might contain:\n    *   The task text (e.g., in a `<span>`).\n    *   A \"Complete\" button or checkbox.\n    *   A \"Delete\" button.\n    *   (Optional) A color indicator element.\n*   **Adding Tasks:** When the \"Add\" button is clicked, read the text from the input field, create a new `<li>` element with the necessary content and buttons, and append it to the `<ul>`.\n*   **Deleting Tasks:** Add an event listener to the \"Delete\" button. When clicked, remove its parent `<li>` element.\n*   **Completing Tasks:** Add an event listener to the \"Complete\" button/checkbox. When clicked, toggle a CSS class (e.g., `.completed`) on the parent `<li>` element. Style this class in your CSS (e.g., `text-decoration: line-through;`).\n*   **Search/Filtering:** Add an event listener (using the `input` event) to the search field. Inside the function:\n    *   Get the search text.\n    *   Loop through all task items (`<li>`).\n    *   If a task's text includes the search text, make sure it's visible.\n    *   If it doesn't, hide it (e.g., by adding a `.hidden` class with `display: none;` in CSS).\n\n## Common Challenges & Tips\n1.  **Event Delegation:** Instead of adding a listener to every delete/complete button, consider adding one listener to the parent `<ul>` and checking which button was clicked inside the event handler. (This is slightly more advanced but more efficient).\n2.  **User Experience:**\n    *   **Deletion Confirmation:** Use `confirm()` before deleting a task to prevent accidental removal.\n    *   **Clear Input:** Clear the task input field after a task is added.\n\n## Best Practices\n*   **Small Functions:** Create functions for specific actions (e.g., `addTask()`, `deleteTask(event)`, `toggleComplete(event)`, `filterTasks()`).\n*   **Clear Naming:** Use descriptive names for variables and functions (e.g., `taskInput`, `taskList`, `newTaskElement`).\n*   **Validate Input:** Don't add empty tasks. Check if the input field has text before creating a task element.\n\n## Useful JavaScript Functions\n\n*   **`document.createElement('tagName')`**: Creates a new HTML element.\n    ```javascript\n    let newItem = document.createElement('li');\n    let deleteBtn = document.createElement('button');\n    ```\n*   **`element.appendChild(childElement)`**: Adds an element inside another element.\n    ```javascript\n    newItem.appendChild(deleteBtn); // Put button inside li\n    taskList.appendChild(newItem); // Put li inside ul\n    ```\n*   **`element.innerText = 'text'` / `element.textContent = 'text'`**: Sets the text content of an element.\n    ```javascript\n    newItem.textContent = taskInput.value; // Set li text\n    ```\n*   **`element.addEventListener('eventType', function)`**: Listens for user actions.\n    ```javascript\n    addBtn.addEventListener('click', addTask);\n    deleteBtn.addEventListener('click', deleteTask);\n    searchInput.addEventListener('input', filterTasks);\n    ```\n*   **`element.value`**: Gets the current text from an input field.\n    ```javascript\n    let taskText = taskInput.value;\n    ```\n*   **`element.remove()`**: Deletes an element from the page.\n    ```javascript\n    listItemToRemove.remove();\n    ```\n*   **`element.classList.add('className')` / `remove()` / `toggle()`**: Manages CSS classes on an element. Useful for completion status and filtering.\n    ```javascript\n    listItem.classList.toggle('completed'); // Mark as done/undone\n    listItem.classList.add('hidden'); // Hide for search\n    listItem.classList.remove('hidden'); // Show for search\n    ```\n*   **`confirm('message')`**: Shows a confirmation dialog (OK/Cancel). Returns `true` if OK is clicked, `false` otherwise.\n    ```javascript\n    // Inside deleteTask function, before removing:\n    if (confirm(\"Are you sure you want to delete this task?\")) {\n      taskElement.remove(); // Only remove if user clicks OK\n    }",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Describtion/SimplePasswordGenerator.md",
      "content": "# Password Generator Project\n\n## Overview\nA customizable password generator that creates passwords based on user preferences. This project teaches string manipulation, random number generation, and handling user input from forms in JavaScript.\n\n## Learning Objectives\n- String manipulation (building strings, accessing characters)\n- Working with random numbers (`Math.random()`)\n- Handling form inputs (checkboxes, sliders/number inputs)\n- Basic conditional logic (`if`/`else`)\n\n## Features\n- **Customizable Length:** User selects the desired password length (e.g., using a slider or number input).\n- **Character Type Selection:** Checkboxes allow users to include:\n    - Lowercase letters (a-z)\n    - Uppercase letters (A-Z)\n    - Numbers (0-9)\n    - Special characters (!@#$%^&*)\n- **Generate Password:** A button to create the password based on selected options.\n- **Display Password:** Show the generated password clearly.\n- **Password Strength Indicator:** A simple visual indicator (e.g., text or colored bar) showing if the password is weak, medium, or strong based on length and character types used.\n- **Copy to Clipboard:** A button to easily copy the generated password.\n\n## Implementation Guide\n\n### HTML Structure Ideas\n*   **Length Input:**\n    *   Use `<input type=\"number\" id=\"length\" min=\"4\" max=\"32\" value=\"12\">` or\n    *   Use `<input type=\"range\" id=\"length\" min=\"4\" max=\"32\" value=\"12\">` (often paired with a `<span>` to display the current value).\n*   **Checkboxes:** Use `<input type=\"checkbox\" id=\"includeLowercase\" checked>` for each character type.\n*   **Generate Button:** `<button id=\"generateBtn\">Generate</button>`\n*   **Display Area:** `<input type=\"text\" id=\"passwordDisplay\" readonly>` (readonly prevents typing).\n*   **Copy Button:** `<button id=\"copyBtn\">Copy</button>`\n*   **Strength Indicator:** A `<div>` or `<span>` (e.g., `<span id=\"strengthIndicator\"></span>`).\n\n### JavaScript Logic Flow\n1.  **Get Settings:** When the \"Generate\" button is clicked:\n    *   Read the desired length from the length input.\n    *   Check which character type checkboxes are ticked.\n    *   Make sure at least one character type is selected.\n2.  **Build Character Set:** Create a string containing all characters allowed based on the selected checkboxes (e.g., if lowercase and numbers are checked, the set would be \"abcdef...xyz012...9\").\n3.  **Generate Password:**\n    *   Start with an empty password string.\n    *   Use a `for` loop that runs `length` times.\n    *   Inside the loop, pick a random character from the built character set using `Math.random()`.\n    *   Append the random character to the password string.\n4.  **Display Password:** Set the value of the password display input field to the generated password.\n5.  **Update Strength Indicator:** Check the generated password's length and the character types used to determine strength (Weak, Medium, Strong) and update the indicator element (e.g., change its text and/or CSS class for color).\n\n## Password Strength Rules (Example)\n*   **Weak:** < 8 chars OR only one character type.\n*   **Medium:** 8-11 chars AND >= 2 character types.\n*   **Strong:** >= 12 chars AND >= 3 character types.\n\n## Common Challenges & Tips\n1.  **Randomness:** `Math.random()` is usually fine for this basic project. Ensure your logic correctly picks from the *entire* combined character set.\n2.  **Ensuring Character Types:** A simple random pick might miss a selected character type (e.g., generate only lowercase even if numbers were checked). A slightly more advanced approach guarantees at least one of each selected type. (For beginners, simple random picking is okay).\n3.  **User Experience:** Give feedback if the user tries to generate a password without selecting any character types.\n\n## Best Practices\n*   **Functions:** Create functions like `generatePassword()`, `updateStrengthIndicator()`, `copyPassword()`.\n*   **Constants:** Store character sets (lowercase, uppercase, etc.) in constant variables.\n*   **Clear Naming:** Use names like `passwordLengthInput`, `includeNumbersCheckbox`, `generatedPassword`.\n*   **Input Validation:** Ensure the length is reasonable and at least one character type is selected before generating.\n\n## Useful JavaScript Functions\n\n*   **`element.value`**: Gets the value from inputs (like `type=\"number\"`, `type=\"range\"`, or the displayed password).\n    ```javascript\n    let desiredLength = parseInt(document.getElementById('length').value); // Use parseInt for numbers\n    ```\n*   **`element.checked`**: Gets the status of a checkbox (returns `true` or `false`).\n    ```javascript\n    let useLowercase = document.getElementById('includeLowercase').checked;\n    ```\n*   **String Concatenation (`+`)**: Combines strings to build the character set.\n    ```javascript\n    let availableChars = \"\";\n    if (useLowercase) { availableChars += \"abcdefghijklmnopqrstuvwxyz\"; }\n    if (useNumbers) { availableChars += \"0123456789\"; }\n    // ... etc.\n    ```\n*   **`Math.random()`**: Generates a random decimal number between 0 (inclusive) and 1 (exclusive).\n*   **`Math.floor(number)`**: Rounds a number DOWN to the nearest whole number. Used with `Math.random()` to get an index.\n    ```javascript\n    // Get a random index within the length of availableChars\n    let randomIndex = Math.floor(Math.random() * availableChars.length);\n    ```\n*   **String Indexing (`string[index]`)**: Gets the character at a specific position (index) in a string.\n    ```javascript\n    let randomChar = availableChars[randomIndex];\n    ```\n*   **`for` loop**: Repeats code a specific number of times (to build the password character by character).\n    ```javascript\n    let password = \"\";\n    for (let i = 0; i < desiredLength; i++) {\n      // ... get randomChar ...\n      password += randomChar;\n    }\n    ```\n*   **`navigator.clipboard.writeText(text)`**: Copies text to the user's clipboard. This is asynchronous and returns a Promise.\n    ```javascript\n    // Inside the event listener for the copy button:\n    let passwordToCopy = document.getElementById('passwordDisplay').value;\n    navigator.clipboard.writeText(passwordToCopy).then(() => {\n      alert('Password copied to clipboard!'); // Optional feedback\n    }).catch(err => {\n      console.error('Failed to copy: ', err); // Handle potential errors\n    });\n    ```\n*   **`if / else if / else`**: Checks conditions to determine password strength.\n    ```javascript\n    let strength = \"Weak\";\n    if (password.length >= 12 && typesCount >= 3) {\n      strength = \"Strong\";\n    } else if (password.length >= 8 && typesCount >= 2) {\n      strength = \"Medium\";\n    }\n    strengthIndicator.textContent = strength;\n    // You could also add/remove CSS classes here for color\n    ```\n\n## Bonus Features (Optional)\n- Visual password strength meter (e.g., colored bar).\n- Generate multiple passwords at once.\n- Allow users to add their own custom characters.\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Describtion/LightDarkModeToggle.md",
      "content": "\n# Light/Dark Mode Toggle Project  \n\n## Overview  \nA theme switcher that demonstrates `localStorage` usage and DOM manipulation. This project teaches fundamental concepts of state management and user preference persistence.  \n\n## Learning Objectives  \n\n- Managing application state  \n- Using `localStorage` for persistence  \n- Handling user preferences  \n- CSS transitions for smooth theme changes  \n\n## Features  \n- Toggle button for theme switching  \n- Animation for toggle button  \n- Smooth transition between themes  \n- Persistent theme selection using `localStorage`  \n\n### Example: Using `localStorage`  \n\nTo store and retrieve the selected theme:  \n\n```js\n// Save theme to localStorage\nlocalStorage.setItem(\"theme\", \"dark\");\n\n// Retrieve theme from localStorage\nconst theme = localStorage.getItem(\"theme\");\nif (theme) {\n    document.body.classList.add(theme);\n}\n```\n\n## State Management  \n- Save theme preference immediately using `localStorage`  \n- Handle page load flicker by applying the saved theme early  \n- Respect system preferences  \n\n## Bonus Features  \n- Multiple theme support  \n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Describtion/ImageSlider.md",
      "content": "\n\n# Image Slider Project  \n\n## Overview  \nAn interactive image carousel that demonstrates DOM manipulation, CSS transitions, and JavaScript event handling. Perfect for learning how to create smooth animations and handle user interactions.  \n\n## Learning Objectives  \n\n- Working with DOM elements dynamically  \n- Implementing CSS transitions  \n- Handling user interactions  \n\n## Features  \n- Next/Previous navigation buttons  \n- Smooth slide transitions  \n\n### HTML Structure  \n- Main container with fixed width/height  \n- Image container for slides  \n- Navigation buttons  \n- Slide indicators/dots  \n\n### CSS Requirements  \n\n#### Explanation of `transform`  \n\n```css\n.slider {\n  display: flex;\n  transition: transform 0.5s ease-in-out;\n}\n\n.slide {\n  min-width: 100%;\n}\n\n.container {\n  overflow: hidden;\n}\n```\n\nThe `transform: translateX(-100%)` shifts the image container to the left, creating the sliding effect. The transition property ensures a smooth movement.  \n\n### JavaScript Components  \n\n#### Core Functionality  \n\n- Slide transition logic  \n- Navigation controls  \n- Event listeners  \n\n```javascript\nconst images = ['img1.jpg', 'img2.jpg', 'img3.jpg'];\nlet currentIndex = 0;\n\nfunction nextSlide() {\n  currentIndex = (currentIndex + 1) % images.length;\n  updateSlider();\n}\n\nfunction previousSlide() {\n  currentIndex = (currentIndex - 1 + images.length) % images.length;\n  updateSlider();\n}\n\nfunction updateSlider() {\n  const slider = document.querySelector('.slider');\n  slider.style.transform = `translateX(-${currentIndex * 100}%)`;\n}\n```\n\n> **Tip:** `currentIndex * containerWidth` determines how much the slider moves for each transition.\n\n### Keyboard Navigation  \n\nTo allow users to navigate using the left and right arrow keys, bind event listeners to `keydown`:  \n\n```javascript\ndocument.addEventListener('keydown', (event) => {\n  if (event.key === 'ArrowRight') nextSlide();\n  if (event.key === 'ArrowLeft') previousSlide();\n});\n```\n\n## Common Challenges & Tips  \n\n- Test with different image sizes  \n- Verify smooth transitions  \n\n### Responsive Design  \n\n- Handle different image sizes  \n- Maintain aspect ratios  \n- Adapt for mobile devices  \n\n## Bonus Features  \n\n- Keyboard navigation (left/right arrows)  \n- Progress indicator  \n- Fade transition option  \n- Caption support for images  \n\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Describtion/BasicCalculator.md",
      "content": "# Basic Calculator Project  \n\n## Overview  \nA simple and interactive calculator that performs basic arithmetic operations. This project helps beginners understand DOM manipulation, event handling, and basic JavaScript functions.  \n\n## Learning Objectives  \n\n- Understanding HTML form inputs and buttons  \n- Working with JavaScript functions and arithmetic operations  \n- Handling user input and displaying results  \n- Basic error handling (division by zero, invalid inputs)  \n\n## Features  \n\n- Basic arithmetic operations:  \n  - Addition (+)  \n  - Subtraction (-)  \n  - Multiplication (*)  \n  - Division (/)  \n- Clear button to reset inputs  \n- Error handling for invalid operations  \n\n## Implementation Guide  \n\n### HTML Structure  \n\n- Create a simple calculator layout.  \n- Include a **display screen** and buttons for numbers and operations.  \n\n### CSS Styling  \n\n- Set appropriate `width`, `height`, and `margin` for elements.  \n- Add **hover effects** to buttons for better UI.  \n- Ensure the display screen is formatted for readability.  \n\n### JavaScript Implementation  \n\n#### **Core Functionalities**  \n\n- Store numbers and operations separately.  \n- Use a **global variable** to store results for further calculations.  \n- Handle **decimal points** properly.  \n- Prevent **multiple operators** from being entered consecutively.  \n\n#### **Common Issues & Fixes**  \n\n1. **Handling Consecutive Operations**  \n   - Ensure that when an operation is selected, the next number input should replace the display instead of appending.  \n\n2. **Division by Zero**  \n   - Add a condition to prevent errors when dividing by zero.  \n\n3. **Floating Point Precision Issues**  \n   - Be mindful of floating point inaccuracies in JavaScript. (e.g., `0.1 + 0.2 !== 0.3`)  \n\n4. **Clearing Display vs Resetting State**  \n   - Differentiate between clearing the display (`C` button) and resetting everything.  ",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    }
  ],
  "testDocuments": {
    "Describtion/WordCounter.md": {
      "description": "Word Counter Project Test",
      "questions": [
        {
          "question": "What event listener is used to update the word count as the user types? (1)",
          "type": "short"
        },
        {
          "question": "Explain the purpose of the `string.split(' ')` function in the context of counting words. (2)",
          "type": "long"
        },
        {
          "question": "Discuss the best practices for writing efficient and maintainable JavaScript code for this project, providing specific examples from the notes. (3)",
          "type": "extended"
        },
        {
          "question": "What is the purpose of the `trim()` method, and how would you use it in this project? (1)",
          "type": "short"
        },
        {
          "question": "Describe two ways to handle rounding numbers in JavaScript, giving examples of when you might use each method. (2)",
          "type": "long"
        },
        {
          "question": "Design a function called `updateCounts()` that uses `addEventListener` to update the word and character counts in real-time as the user types into a text area with the ID `textArea`.  Explain each step of your code and how it interacts with the DOM. (3)",
          "type": "extended"
        }
      ],
      "answers": {}
    }
  }
}